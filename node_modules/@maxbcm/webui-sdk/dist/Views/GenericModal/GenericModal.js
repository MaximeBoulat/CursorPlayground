import { ErrorDialogState } from '../../Models/ErrorDialogState';
import { ErrorDialog } from '../ErrorDialog/ErrorDialog';
import { SpinnerOverlay } from '../SpinnerOverlay/SpinnerOverlay';
import { UIStateType } from '../../Models/UIState';
import './GenericModal.css';
export class GenericModalState {
    stateType;
    errorDialogState;
    constructor(stateType, errorDialogState) {
        this.stateType = stateType;
        this.errorDialogState = errorDialogState;
    }
    static idle() {
        return new GenericModalState(UIStateType.READY, undefined);
    }
    static loading() {
        return new GenericModalState(UIStateType.LOADING, undefined);
    }
    static error(errorDialogState) {
        return new GenericModalState(UIStateType.ERROR, errorDialogState);
    }
}
export class GenericModal {
    form;
    overlay;
    closeButton;
    errorDialog;
    element;
    constructor(embed, formTitle) {
        // Modal body
        const errorDialog = new ErrorDialog();
        const modalBody = document.createElement('div');
        modalBody.classList.add('modal-body');
        modalBody.appendChild(embed);
        modalBody.appendChild(errorDialog.element);
        // Overlay
        const overlay = new SpinnerOverlay();
        // Header
        const title = document.createElement('div');
        title.textContent = formTitle;
        const closeButton = document.createElement('button');
        closeButton.type = 'button';
        closeButton.classList.add('btn-close');
        const modalHeader = document.createElement('div');
        modalHeader.classList.add('modal-header', 'title');
        modalHeader.appendChild(title);
        modalHeader.appendChild(closeButton);
        // Footer
        const modalFooter = document.createElement('div');
        modalFooter.classList.add('modal-footer');
        // Modal content
        const modalContent = document.createElement('div');
        modalContent.classList.add('modal-content');
        modalContent.appendChild(overlay.element);
        modalContent.appendChild(modalHeader);
        modalContent.appendChild(modalBody);
        modalContent.appendChild(modalFooter);
        // Modal dialog
        const modalDialog = document.createElement('div');
        modalDialog.classList.add('modal-dialog');
        modalDialog.appendChild(modalContent);
        // Modal
        const modal = document.createElement('div');
        modal.classList.add('modal', 'fade', 'createProjectModal');
        modal.id = 'createProjectModal';
        modal.tabIndex = -1;
        modal.setAttribute('aria-labelledby', 'exampleModalLabel');
        modal.setAttribute('aria-hidden', 'true');
        modal.appendChild(modalDialog);
        this.form = embed;
        this.overlay = overlay;
        this.closeButton = closeButton;
        this.errorDialog = errorDialog;
        this.element = modal;
        // Set initial state
        this.updateState(GenericModalState.idle());
    }
    updateState(state) {
        switch (state.stateType) {
            case UIStateType.READY:
                this.overlay.element.style.display = 'none';
                this.errorDialog.updateState(ErrorDialogState.hidden());
                break;
            case UIStateType.LOADING:
                this.overlay.element.style.display = 'flex';
                this.errorDialog.updateState(ErrorDialogState.hidden());
                break;
            case UIStateType.ERROR:
                this.overlay.element.style.display = 'none';
                this.errorDialog.updateState(state.errorDialogState);
                break;
        }
    }
}
