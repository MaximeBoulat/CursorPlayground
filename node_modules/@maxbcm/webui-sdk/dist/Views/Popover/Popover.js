import './Popover.css';
export class Popover {
    constructor(orientation, embed, anchor, container = document.body) {
        // Layout the view
        const overlay = document.createElement('div');
        overlay.classList.add('popoverOverlay');
        const popover = document.createElement('div');
        popover.classList.add('popoverBubble');
        popover.appendChild(embed);
        if (orientation.up) {
            popover.style.bottom = `${orientation.verticalOffset}px`;
        }
        else {
            popover.style.top = `${orientation.verticalOffset}px`;
        }
        if (orientation.left) {
            popover.style.right = `${orientation.horizontalOffset}px`;
        }
        else {
            popover.style.left = `${orientation.horizontalOffset}px`;
        }
        anchor.appendChild(overlay);
        anchor.appendChild(popover);
        const popoverRect = popover.getBoundingClientRect();
        const anchorRect = anchor.getBoundingClientRect();
        const containerBounds = container.getBoundingClientRect();
        const containerRect = {
            top: containerBounds.top,
            bottom: containerBounds.top + container.clientHeight,
            left: containerBounds.left,
            right: containerBounds.left + container.clientWidth,
            width: container.clientWidth,
            height: container.clientHeight
        };
        if (popoverRect.right > containerRect.right) {
            const rightOffset = anchorRect.right - containerRect.right;
            popover.style.right = `${rightOffset}px`;
            popover.style.left = 'auto';
        }
        else if (popoverRect.left < containerRect.left) {
            const leftOffset = -anchorRect.left;
            popover.style.left = `${leftOffset}px`;
            popover.style.right = 'auto';
        }
        if (popoverRect.width > containerRect.width) {
            popover.style.width = `${containerRect.width}px`;
        }
        if (popoverRect.bottom > containerRect.bottom) {
            const bottomOffset = anchorRect.bottom - containerRect.bottom;
            popover.style.bottom = `${bottomOffset}px`;
            popover.style.top = 'auto';
        }
        else if (popoverRect.top < containerRect.top) {
            const topOffset = containerRect.top - anchorRect.top;
            popover.style.top = `${topOffset}px`;
            popover.style.bottom = 'auto';
        }
        if (popoverRect.height > containerRect.height) {
            popover.style.height = `${containerRect.height}px`;
        }
        // configure the buttons
        let pointerTimeout = null;
        const POINTER_DEBOUNCE_MS = 150;
        const disablePointerEvents = () => {
            overlay.style.pointerEvents = 'none';
            if (pointerTimeout) {
                window.clearTimeout(pointerTimeout);
            }
            pointerTimeout = window.setTimeout(() => {
                overlay.style.pointerEvents = 'auto';
                overlay.style.pointerEvents = 'auto';
            }, POINTER_DEBOUNCE_MS);
        };
        // Handle mouse wheel
        overlay.addEventListener('wheel', () => {
            disablePointerEvents();
        }, { passive: true });
        // Handle touch scroll
        overlay.addEventListener('touchmove', () => {
            disablePointerEvents();
        }, { passive: true });
        overlay.addEventListener('click', (event) => {
            event.stopPropagation();
            overlay.remove();
            popover.remove();
        });
    }
}
