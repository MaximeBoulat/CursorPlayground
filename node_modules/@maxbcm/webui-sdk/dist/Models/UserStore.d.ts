import { User } from './UserState';
import { UIState } from './UIState';
import { UserInfo } from './UserInfo';
interface UserStore {
    currentState: UIState<User>;
    setCurrentState: (state: UIState<User>) => void;
    setUserInfoState: (userInfoState: UIState<UserInfo>) => void;
}
export declare const useUserStore: import("zustand").UseBoundStore<Omit<import("zustand").StoreApi<UserStore>, "subscribe"> & {
    subscribe: {
        (listener: (selectedState: UserStore, previousSelectedState: UserStore) => void): () => void;
        <U>(selector: (state: UserStore) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
            equalityFn?: ((a: U, b: U) => boolean) | undefined;
            fireImmediately?: boolean | undefined;
        } | undefined): () => void;
    };
}>;
export declare const getAccount: (state: UserStore) => import("@maxbcm/bcm-foundation").Account | undefined;
export declare const getUserInfoState: (state: UserStore) => UIState<UserInfo> | undefined;
export {};
