import { Server, ServerCommunicationError } from '../Models/Server';
import { UserInfo } from '../Models/UserInfo';
import { GlobalDefinition, reloadWindow } from '../Models/Globals';
import { ErrorDialogState } from '../Models/ErrorDialogState';
import { Account } from '@maxbcm/bcm-foundation';
import { useUserStore } from '../Models/UserStore';
import { User } from '../Models/UserState';
import { UIState } from '../Models/UIState';
export var RegistrationError;
(function (RegistrationError) {
    RegistrationError[RegistrationError["VALIDATION_USERNAME"] = 0] = "VALIDATION_USERNAME";
    RegistrationError[RegistrationError["VALIDATION_PASSWORD"] = 1] = "VALIDATION_PASSWORD";
    RegistrationError[RegistrationError["CONFLICT"] = 2] = "CONFLICT";
})(RegistrationError || (RegistrationError = {}));
export class AccountService {
    forceProduction;
    constructor(forceProduction = false) {
        this.forceProduction = forceProduction;
    }
    requestSessionInfo() {
        const userInfoState = UIState.loading();
        useUserStore.getState().setUserInfoState(userInfoState);
        let requestData = {
            payload: {
                request_scope: 'account',
                request_command: 'SESSION_START'
            }
        };
        let body = JSON.stringify(requestData);
        const urlParams = new URLSearchParams(window.location.search);
        let headers;
        const jwt = urlParams.get(GlobalDefinition.POTATO);
        if (jwt) {
            headers = {
                'Content-Type': 'application/json',
                'Dbendpoint': 'website_production_db',
                'Authorization': `${jwt}`
            };
        }
        else {
            headers = {
                'Content-Type': 'application/json',
                'Dbendpoint': 'website_production_db',
            };
        }
        const errorTitle = 'Failed to retrieve session';
        fetch(`${Server.WEBSITE.url(this.forceProduction)}/service.php`, {
            method: 'POST',
            credentials: 'include',
            headers: headers,
            body: body
        }).then(response => {
            if (response.headers.get(GlobalDefinition.RESPONSE_SOURCE_HEADER.key) === GlobalDefinition.RESPONSE_SOURCE_HEADER.value) {
                if (response.status === 200) {
                    response.json().then(data => {
                        const account = data.session;
                        const user = new User(account, UIState.loading());
                        const userState = UIState.ready(user);
                        useUserStore.getState().setCurrentState(userState);
                    }).catch(parsingError => {
                        const errorDialogState = ErrorDialogState.generic(errorTitle, 'Unexpected response');
                        const userState = UIState.error(errorDialogState);
                        useUserStore.getState().setCurrentState(userState);
                    });
                }
                else {
                    response.json().then(data => {
                        const errorDialogState = ErrorDialogState.withSecondary(errorTitle, `Coded response: status code: ${response.status} subcode: ${data.subcode}`, data.message);
                        const userState = UIState.error(errorDialogState);
                        useUserStore.getState().setCurrentState(userState);
                    }).catch(parsingError => {
                        const errorDialogState = ErrorDialogState.generic(errorTitle, 'Unexpected response');
                        const userState = UIState.error(errorDialogState);
                        useUserStore.getState().setCurrentState(userState);
                    });
                }
            }
            else {
                const errorDialogState = ErrorDialogState.generic(errorTitle, 'Unexpected response');
                const userState = UIState.error(errorDialogState);
                useUserStore.getState().setCurrentState(userState);
            }
        }).catch(requestError => {
            const errorDialogState = ErrorDialogState.generic(errorTitle, 'Request failed');
            const userState = UIState.error(errorDialogState);
            useUserStore.getState().setCurrentState(userState);
        });
    }
    getUserInfo(account) {
        const userInfoState = UIState.loading();
        useUserStore.getState().setUserInfoState(userInfoState);
        let errorTitle = 'Failed to retrieve user info';
        let requestData = {
            payload: {
                request_scope: 'account',
                request_command: 'GET_USER_INFO',
                request_params: {
                    accountId: account.accountId,
                    loggedIn: account.loggedIn
                }
            }
        };
        let body = JSON.stringify(requestData);
        let headers = {
            'Content-Type': 'application/json',
            'Dbendpoint': 'website_production_db',
        };
        fetch(`${Server.WEBSITE.url(this.forceProduction)}/service.php`, {
            method: 'POST',
            credentials: 'include',
            headers: headers,
            body: body
        }).then(response => {
            if (response.headers.get(GlobalDefinition.RESPONSE_SOURCE_HEADER.key) === GlobalDefinition.RESPONSE_SOURCE_HEADER.value) {
                if (response.status === 200) {
                    response.json().then(data => {
                        const userInfo = new UserInfo(account.loggedIn, data);
                        const userInfoState = UIState.ready(userInfo);
                        useUserStore.getState().setUserInfoState(userInfoState);
                    }).catch((parsingError) => {
                        const errorDialogState = ErrorDialogState.generic(errorTitle, 'Unexpected response');
                        const userInfoState = UIState.error(errorDialogState);
                        useUserStore.getState().setUserInfoState(userInfoState);
                    });
                }
                else if (response.status === 404) {
                    const errorDialogState = ErrorDialogState.withButton(errorTitle, 'User not found', 'Refresh session', () => {
                        this.endSession().then((user) => {
                            reloadWindow();
                        });
                    });
                    const userInfoState = UIState.error(errorDialogState);
                    useUserStore.getState().setUserInfoState(userInfoState);
                }
                else {
                    response.json().then(data => {
                        const errorDialogState = ErrorDialogState.withSecondary(errorTitle, `Coded response: status code: ${response.status} subcode: ${data.subcode}`, data.message);
                        const userInfoState = UIState.error(errorDialogState);
                        useUserStore.getState().setUserInfoState(userInfoState);
                    }).catch(parsingError => {
                        const errorDialogState = ErrorDialogState.generic(errorTitle, 'Unexpected response');
                        const userInfoState = UIState.error(errorDialogState);
                        useUserStore.getState().setUserInfoState(userInfoState);
                    });
                }
            }
            else {
                const errorDialogState = ErrorDialogState.generic(errorTitle, 'Unexpected response');
                const userInfoState = UIState.error(errorDialogState);
                useUserStore.getState().setUserInfoState(userInfoState);
            }
        }).catch(requestError => {
            const errorDialogState = ErrorDialogState.generic(errorTitle, 'Request failed');
            const userInfoState = UIState.error(errorDialogState);
            useUserStore.getState().setUserInfoState(userInfoState);
        });
    }
    endSession() {
        return new Promise((resolve, reject) => {
            let requestData = {
                payload: {
                    request_scope: 'account',
                    request_command: 'SESSION_STOP'
                }
            };
            let body = JSON.stringify(requestData);
            fetch(`${Server.WEBSITE.url(this.forceProduction)}/service.php`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Dbendpoint': 'website_production_db',
                },
                body: body
            }).then(response => {
                if (response.headers.get(GlobalDefinition.RESPONSE_SOURCE_HEADER.key) === GlobalDefinition.RESPONSE_SOURCE_HEADER.value) {
                    if (response.status === 200) {
                        response.json().then(data => {
                            const user = data.session;
                            resolve(user);
                        }).catch(parsingError => {
                            reject({ error: ServerCommunicationError.UNEXPECTED_RESPONSE });
                        });
                    }
                    else {
                        reject({ error: ServerCommunicationError.CODED_RESPONSE, statusCode: response.status });
                    }
                }
                else {
                    reject({ error: ServerCommunicationError.UNEXPECTED_RESPONSE });
                }
            }).catch(requestError => {
                reject({ error: ServerCommunicationError.REQUEST_FAILED });
            });
        });
    }
    register(username, password) {
        return new Promise((resolve, reject) => {
            let requestData = {
                payload: {
                    request_scope: 'account',
                    request_command: 'REGISTER',
                    request_params: {
                        username: username,
                        password: password
                    }
                }
            };
            let body = JSON.stringify(requestData);
            fetch(`${Server.WEBSITE.url(this.forceProduction)}/service.php`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Dbendpoint': 'website_production_db',
                },
                body: body
            })
                .then(response => {
                if (response.headers.get(GlobalDefinition.RESPONSE_SOURCE_HEADER.key) === GlobalDefinition.RESPONSE_SOURCE_HEADER.value) {
                    switch (response.status) {
                        case 200:
                            response.json().then(data => {
                                const user = new Account(data.session);
                                resolve(user);
                            }).catch(parsingError => {
                                reject({ error: ServerCommunicationError.UNEXPECTED_RESPONSE });
                            });
                            break;
                        case 400:
                            response.json().then(data => {
                                switch (data.subcode) {
                                    case 0:
                                        reject({
                                            error: ServerCommunicationError.CODED_RESPONSE,
                                            subError: RegistrationError.VALIDATION_USERNAME
                                        });
                                        break;
                                    case 1:
                                        reject({
                                            error: ServerCommunicationError.CODED_RESPONSE,
                                            subError: RegistrationError.VALIDATION_PASSWORD
                                        });
                                        break;
                                    default:
                                        reject({
                                            error: ServerCommunicationError.UNEXPECTED_RESPONSE
                                        });
                                        break;
                                }
                            }).catch(parsingError => {
                                reject({ error: ServerCommunicationError.UNEXPECTED_RESPONSE });
                            });
                            break;
                        case 409:
                            reject({
                                error: ServerCommunicationError.CODED_RESPONSE,
                                subError: RegistrationError.CONFLICT
                            });
                            break;
                        case 520:
                            response.json().then(data => {
                                if (data.subcode === 0) {
                                    reject({
                                        error: ServerCommunicationError.BAD_DB_ENPOINT
                                    });
                                }
                                else {
                                    reject({
                                        error: ServerCommunicationError.DATABASE_PROBLEM
                                    });
                                }
                            }).catch(parsingError => {
                                reject({
                                    error: ServerCommunicationError.UNEXPECTED_RESPONSE
                                });
                            });
                            break;
                        default:
                            reject({
                                error: ServerCommunicationError.UNEXPECTED_RESPONSE
                            });
                            break;
                    }
                }
                else {
                    reject({
                        error: ServerCommunicationError.UNEXPECTED_RESPONSE
                    });
                }
            })
                .catch(requestError => {
                reject({ error: ServerCommunicationError.REQUEST_FAILED });
            });
        });
    }
    login(username, password) {
        return new Promise((resolve, reject) => {
            let requestData = {
                payload: {
                    request_scope: 'account',
                    request_command: 'LOGIN',
                    request_params: {
                        username: username,
                        password: password
                    }
                }
            };
            let body = JSON.stringify(requestData);
            fetch(`${Server.WEBSITE.url(this.forceProduction)}/service.php`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                    'Dbendpoint': 'website_production_db',
                },
                body: body
            })
                .then(response => {
                if (response.headers.get(GlobalDefinition.RESPONSE_SOURCE_HEADER.key) === GlobalDefinition.RESPONSE_SOURCE_HEADER.value) {
                    switch (response.status) {
                        case 200:
                            response.json().then(data => {
                                const user = new Account(data.session);
                                resolve(user);
                            }).catch(parsingError => {
                                reject({ error: ServerCommunicationError.UNEXPECTED_RESPONSE });
                            });
                            break;
                        case 401:
                            reject({
                                error: ServerCommunicationError.UNAUTHORIZED
                            });
                            break;
                        case 520:
                            response.json().then(data => {
                                if (data.subcode === 0) {
                                    reject({
                                        error: ServerCommunicationError.BAD_DB_ENPOINT
                                    });
                                }
                                else {
                                    reject({
                                        error: ServerCommunicationError.DATABASE_PROBLEM
                                    });
                                }
                            }).catch(parsingError => {
                                reject({
                                    error: ServerCommunicationError.UNEXPECTED_RESPONSE
                                });
                            });
                            break;
                        default:
                            reject({
                                error: ServerCommunicationError.UNEXPECTED_RESPONSE
                            });
                            break;
                    }
                }
                else {
                    reject({ error: ServerCommunicationError.UNEXPECTED_RESPONSE });
                }
            }).catch(requestError => {
                reject({ error: ServerCommunicationError.REQUEST_FAILED });
            });
        });
    }
}
