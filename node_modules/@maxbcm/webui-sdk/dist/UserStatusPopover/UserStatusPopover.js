import { ErrorDialog } from '../index';
import './UserStatusPopover.css';
var UserStatusPopoverStateType;
(function (UserStatusPopoverStateType) {
    UserStatusPopoverStateType[UserStatusPopoverStateType["LOADING"] = 0] = "LOADING";
    UserStatusPopoverStateType[UserStatusPopoverStateType["READY"] = 1] = "READY";
    UserStatusPopoverStateType[UserStatusPopoverStateType["ERROR"] = 2] = "ERROR";
})(UserStatusPopoverStateType || (UserStatusPopoverStateType = {}));
export class UserStatusPopoverState {
    stateType;
    isLoggedIn;
    userInfo;
    errorDialogState;
    constructor(stateType, isLoggedIn, userInfo, errorDialogState) {
        this.stateType = stateType;
        this.isLoggedIn = isLoggedIn;
        this.userInfo = userInfo;
        this.errorDialogState = errorDialogState;
    }
    static loading() {
        return new UserStatusPopoverState(UserStatusPopoverStateType.LOADING, undefined, undefined, undefined);
    }
    static ready(isLoggedIn, userInfo) {
        return new UserStatusPopoverState(UserStatusPopoverStateType.READY, isLoggedIn, userInfo, undefined);
    }
    static error(errorDialogState) {
        return new UserStatusPopoverState(UserStatusPopoverStateType.ERROR, undefined, undefined, errorDialogState);
    }
}
export class UserStatusPopover {
    loggedInSection;
    planSection;
    balanceSection;
    buttonsSection;
    loadingStateContainer;
    errorStateContainer;
    readyStateContainer;
    errorDialog;
    bubble;
    element;
    constructor() {
        // Error state
        const errorDialog = new ErrorDialog();
        const errorStateContainer = document.createElement('div');
        errorStateContainer.classList.add('genericStateContainer');
        errorStateContainer.style.display = 'none';
        errorStateContainer.appendChild(errorDialog.element);
        // Loading state
        const spinner = document.createElement('div');
        spinner.classList.add('spinner');
        const loadingStateContainer = document.createElement('div');
        loadingStateContainer.classList.add('genericStateContainer');
        loadingStateContainer.style.display = 'none';
        loadingStateContainer.appendChild(spinner);
        // Ready state
        const loggedInSection = new LoggedInSection();
        const planSection = new PlanSection();
        const balanceSection = new BalanceSection();
        const buttonsSection = new ButtonsSection();
        const readyStateContainer = document.createElement('div');
        readyStateContainer.classList.add('genericStateContainer');
        readyStateContainer.appendChild(loggedInSection.element);
        readyStateContainer.appendChild(planSection.element);
        readyStateContainer.appendChild(balanceSection.element);
        readyStateContainer.appendChild(buttonsSection.element);
        const bubble = document.createElement('div');
        bubble.classList.add('bubble');
        bubble.appendChild(errorStateContainer);
        bubble.appendChild(loadingStateContainer);
        bubble.appendChild(readyStateContainer);
        const userStatusPopover = document.createElement('div');
        userStatusPopover.classList.add('userStatusPopover');
        userStatusPopover.appendChild(bubble);
        this.loggedInSection = loggedInSection;
        this.planSection = planSection;
        this.balanceSection = balanceSection;
        this.buttonsSection = buttonsSection;
        this.loadingStateContainer = loadingStateContainer;
        this.errorStateContainer = errorStateContainer;
        this.readyStateContainer = readyStateContainer;
        this.errorDialog = errorDialog;
        this.bubble = bubble;
        this.element = userStatusPopover;
    }
    updateState(state) {
        switch (state.stateType) {
            case UserStatusPopoverStateType.LOADING:
                this.loadingStateContainer.style.display = 'flex';
                this.errorStateContainer.style.display = 'none';
                this.readyStateContainer.style.display = 'none';
                break;
            case UserStatusPopoverStateType.READY:
                this.loadingStateContainer.style.display = 'none';
                this.errorStateContainer.style.display = 'none';
                this.readyStateContainer.style.display = 'flex';
                this.loggedInSection.configureForUser(state.isLoggedIn, state.userInfo);
                this.planSection.configureForUser(state.userInfo);
                this.buttonsSection.configureForUser(state.isLoggedIn);
                this.balanceSection.configureForUser(state.userInfo);
                break;
            case UserStatusPopoverStateType.ERROR:
                this.loadingStateContainer.style.display = 'none';
                this.errorStateContainer.style.display = 'flex';
                this.readyStateContainer.style.display = 'none';
                this.errorDialog.updateState(state.errorDialogState);
                break;
        }
    }
}
class SimpleSection {
    simpleRow;
    element;
    constructor() {
        const section = document.createElement('div');
        section.classList.add('section');
        let simpleRow = new SimpleRow();
        section.appendChild(simpleRow.element);
        this.simpleRow = simpleRow;
        this.element = section;
    }
}
class LoggedInSection extends SimpleSection {
    configureForUser(isLoggedIn, userInfo) {
        let title = 'Logged in as:';
        let subtitle = `${userInfo.username}`;
        let subtitleColor = 'orange';
        if (isLoggedIn) {
            subtitleColor = 'green';
        }
        this.simpleRow.configure(title, subtitle, true, subtitleColor);
    }
}
class PlanSection extends SimpleSection {
    configureForUser(userInfo) {
        const title = 'Plan:';
        const subtitle = userInfo.tier.value;
        this.simpleRow.configure(title, subtitle, true);
    }
}
class BalanceSection extends SimpleSection {
    configureForUser(userInfo) {
        const title = 'Balance:';
        const balance = userInfo.accountBalance;
        this.simpleRow.configure(title, `${balance}`, false);
    }
}
class ButtonsSection {
    logoutButton;
    loginButton;
    endSessionButton;
    element;
    constructor() {
        const section = document.createElement('div');
        section.classList.add('section');
        const logoutButton = document.createElement('button');
        logoutButton.classList.add('actionButton');
        logoutButton.style.margin = '10px';
        logoutButton.textContent = 'Logout';
        section.appendChild(logoutButton);
        const loginButton = document.createElement('button');
        loginButton.classList.add('actionButton');
        loginButton.style.margin = '10px';
        loginButton.textContent = 'Login';
        section.appendChild(loginButton);
        if (window.location.hostname === "localhost" ||
            window.location.hostname === "127.0.0.1") {
            const endSessionButton = document.createElement('button');
            endSessionButton.classList.add('actionButton');
            endSessionButton.style.margin = '10px';
            endSessionButton.textContent = 'End Session';
            section.appendChild(endSessionButton);
            this.endSessionButton = endSessionButton;
        }
        this.logoutButton = logoutButton;
        this.loginButton = loginButton;
        this.element = section;
    }
    configureForUser(isLoggedIn) {
        if (isLoggedIn) {
            this.loginButton.style.display = 'none';
            this.logoutButton.style.display = 'block';
        }
        else {
            this.loginButton.style.display = 'block';
            this.logoutButton.style.display = 'none';
        }
    }
}
class SimpleRow {
    outerContainer;
    titleElement;
    subtitleElement;
    element;
    constructor() {
        const outerContainer = document.createElement('div');
        outerContainer.classList.add('simpleRow');
        const titleElement = document.createElement('div');
        titleElement.classList.add('title');
        outerContainer.appendChild(titleElement);
        const subtitleElement = document.createElement('div');
        subtitleElement.classList.add('subtitle');
        outerContainer.appendChild(subtitleElement);
        this.outerContainer = outerContainer;
        this.titleElement = titleElement;
        this.subtitleElement = subtitleElement;
        this.element = outerContainer;
    }
    configure(title, subtitle, showBottomBorder, subtitleColor) {
        this.titleElement.textContent = title;
        this.subtitleElement.textContent = subtitle;
        if (!showBottomBorder) {
            this.outerContainer.style.borderBottom = 'none';
        }
        if (subtitleColor) {
            this.subtitleElement.style.color = subtitleColor;
        }
    }
}
